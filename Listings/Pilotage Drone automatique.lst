C51 COMPILER V9.59.0.0   PILOTAGE_DRONE_AUTOMATIQUE                                        02/29/2020 19:22:33 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE PILOTAGE_DRONE_AUTOMATIQUE
OBJECT MODULE PLACED IN .\Objects\Pilotage Drone automatique.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Pilotage Drone automatique.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND
                    - PRINT(.\Listings\Pilotage Drone automatique.lst) TABS(2) OBJECT(.\Objects\Pilotage Drone automatique.obj)

line level    source

   1          /*===========================================================================*=
   2             CFPT - Projet : Pilotage Drone automatique
   3             Auteur        : Martin Manuel
   4             Date creation : 29.02.20
   5            =============================================================================
   6             Descriptif: Ce Logiciel vient remplacer deux joysticks d'une télécommande
   7            par 4 PWM (2 par joystick). dans un premier temps dans l'idée de piloter un
   8            drone en connectant les 4 signaux PWM à la place des joysticks sur la 
   9            télécommande.
  10            (Les PWM nécessitent un filtre RC afin de générer une tension analogique 
  11            continue proportionelle au PWM et pas un signal carré)
  12          =*===========================================================================*/
  13          #include <reg51f380.h>     // registres 51f38C
  14          #include "InterruptPriorities.h"
  15          
  16          // ==== Fonctions prototypes ==================================================
  17          void ClockInit ();      // init. clock systeme
  18          void PortInit ();       // init. config des ports
  19          void TimerInit ();      // init. timers
  20          
  21          // direction joysticks
  22          void JoystickDirection (unsigned char gauche, unsigned char droite); 
  23          
  24          // ==== Fonctions prototypes ==================================================
  25          #define LOADVALUE 20
  26          
  27          // directions drone
  28          #define HAUT 0
  29          #define BAS 1
  30          #define GAUCHE 2
  31          #define DROITE 3
  32          #define CALIBRATION 4
  33          #define REPOS 5
  34          
  35          // ==== Variables Globales ====================================================
  36          bit flagTimer = 0;
  37          
  38          //--------- x% Potentiometres Joysticks --------------
  39          unsigned char Joystick_Gauche_Vertical = 50, Joystick_Gauche_Horizontal = 50,
  40            Joystick_Droite_Vertical = 50, Joystick_Droite_Horizontal = 10;
  41          
  42          /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  43          /*                                  MAIN                                       */
  44          /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  45          void main ()
  46          {
  47   1        //--- Variables locales ----------------------------------------------------
  48   1        unsigned char periodePWM = 0; //(va de 0 - 100)
  49   1        unsigned int compteurSeconde = 0; 
  50   1        unsigned char compteurMiliSeconde = 0, compteurAction;
  51   1        bit run = 1, flagSeconde;
  52   1        
  53   1      
  54   1        
C51 COMPILER V9.59.0.0   PILOTAGE_DRONE_AUTOMATIQUE                                        02/29/2020 19:22:33 PAGE 2   

  55   1        //--------- PWM Joysticks ----------------------------
  56   1                               //      +---- PWM Joystick Gauche Vertical
  57   1                               //      |+--- PWM Joystick Gauche Horizontal
  58   1                               //      ||+-- PWM Joystick Droite Vertical
  59   1                               //      |||+- PWM Joystick Droite Horizontal
  60   1                               //      ||||
  61   1        unsigned char pwm = 0; // xxxx xxxx 4 PWM
  62   1        
  63   1        //--- Initialisation uC-----------------------------------------------------
  64   1        PCA0MD &= ~0x40;     // WDTE = 0 (disable watchdog timer)
  65   1        ClockInit ();        // init. clock systeme
  66   1        PortInit ();         // init. config des ports 
  67   1        TimerInit ();        // init. timers
  68   1        TR0 = 1;             // lance le timer 0
  69   1        
  70   1        //----Boucle infinie--------------------------------------------------------  
  71   1        while (run)
  72   1        {
  73   2          if(flagSeconde)
  74   2          {
  75   3            flagSeconde = 0;
  76   3            switch (compteurAction)
  77   3            {
  78   4              // test
  79   4              case 0 : JoystickDirection (HAUT,HAUT);
  80   4                break;
  81   4              case 1 : JoystickDirection (BAS,BAS);
  82   4                break;
  83   4              case 2 : JoystickDirection (GAUCHE,GAUCHE);
  84   4                break;
  85   4              case 3 : JoystickDirection (DROITE,DROITE);
  86   4                break;
  87   4              case 4 : JoystickDirection (REPOS,REPOS);
  88   4                break;
  89   4              case 5 : JoystickDirection (CALIBRATION,CALIBRATION);
  90   4                break;
  91   4              case 6 : compteurAction = 0;
  92   4                break;
  93   4              
  94   4              /* // Demarrage drone
  95   4              case 0 : JoystickDirection (HAUT,REPOS);
  96   4                break;
  97   4              case 1 : JoystickDirection (BAS,REPOS);
  98   4                break;
  99   4              case 2 : JoystickDirection (CALIBRATION,CALIBRATION);
 100   4                break;
 101   4              case 3 : run = 0; // met fin au programme après toutes les actions
 102   4                break;*/
 103   4            }
 104   3            compteurAction ++;
 105   3            
 106   3          }
 107   2          //chaque 10us
 108   2          if(flagTimer)
 109   2          {
 110   3            //----- compteur base de temps ----
 111   3            
 112   3            if(compteurMiliSeconde <= 100)
 113   3            {
 114   4              compteurMiliSeconde++;
 115   4            }
 116   3            else
C51 COMPILER V9.59.0.0   PILOTAGE_DRONE_AUTOMATIQUE                                        02/29/2020 19:22:33 PAGE 3   

 117   3            {
 118   4              compteurMiliSeconde = 0;
 119   4              compteurSeconde ++;
 120   4            }
 121   3            
 122   3            if(compteurSeconde > 1000)
 123   3            {
 124   4              compteurSeconde = 0;
 125   4              flagSeconde = 1;
 126   4            }
 127   3      
 128   3            
 129   3            // --- mise a jour periode PWM ----
 130   3            periodePWM ++;
 131   3            if(periodePWM>100)
 132   3            {
 133   4              periodePWM = 0;
 134   4            }
 135   3            
 136   3            // --- mise a jour valeurs PWM ----
 137   3            if(Joystick_Gauche_Vertical >= periodePWM)
 138   3            {
 139   4              pwm |= 0x08; //PWM Joystick Gauche Vertical force a 1
 140   4            }
 141   3            else
 142   3            {
 143   4              pwm &= 0xF7; //PWM Joystick Gauche Vertical force a 0
 144   4            }
 145   3            
 146   3            if(Joystick_Gauche_Horizontal >= periodePWM)
 147   3            {
 148   4              pwm |= 0x04; //PWM Joystick Gauche Vertical force a 1
 149   4            }
 150   3            else
 151   3            {
 152   4              pwm &= 0xFB; //PWM Joystick Gauche Vertical force a 0
 153   4            }
 154   3            
 155   3            if(Joystick_Droite_Vertical >= periodePWM)
 156   3            {
 157   4              pwm |= 0x02; //PWM Joystick Gauche Vertical force a 1
 158   4            }
 159   3            else
 160   3            {
 161   4              pwm &= 0xFD; //PWM Joystick Gauche Vertical force a 0
 162   4            }
 163   3            
 164   3            if(Joystick_Droite_Horizontal >= periodePWM)
 165   3            {
 166   4              pwm |= 0x01; //PWM Joystick Gauche Vertical force a 1
 167   4            }
 168   3            else
 169   3            {
 170   4              pwm &= 0xFE; //PWM Joystick Gauche Vertical force a 0
 171   4            }
 172   3            
 173   3            // on met à jour les sorties PWM
 174   3            P0 = pwm;
 175   3            
 176   3          }
 177   2          
 178   2        }// End while (1)
C51 COMPILER V9.59.0.0   PILOTAGE_DRONE_AUTOMATIQUE                                        02/29/2020 19:22:33 PAGE 4   

 179   1      }   /*%%%%%%%%%%%%%%%%%%%%%%%%%%%% END MAIN %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
 180          //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Routine d'initialisation uC%%%%%%%%%%%%%%%%%%%%%%%%%%%
 181          
 182          
 183          /*---------------------------------------------------------------------------*-
 184             JoystickDirection ()
 185            -----------------------------------------------------------------------------
 186             Descriptif: 
 187             Entree    : gauche (HAUT,BAS,GAUCHE,DROITE,CALIBRATIONDRONE)
 188                         droite (HAUT,BAS,GAUCHE,DROITE,CALIBRATIONDRONE)
 189             Sortie    : --
 190          -*---------------------------------------------------------------------------*/
 191          void JoystickDirection (unsigned char gauche, unsigned char droite)
 192          {
 193   1        switch (gauche)
 194   1        {
 195   2          case HAUT : Joystick_Gauche_Vertical = 100; 
 196   2            break;
 197   2          case BAS : Joystick_Gauche_Vertical = 0;
 198   2            break;
 199   2          case GAUCHE : Joystick_Gauche_Horizontal = 0;
 200   2            break;
 201   2          case DROITE : Joystick_Gauche_Horizontal = 100;
 202   2            break;
 203   2          case CALIBRATION : Joystick_Gauche_Horizontal = 100; Joystick_Gauche_Vertical = 0;
 204   2            break;
 205   2          case REPOS : Joystick_Gauche_Horizontal = 50; Joystick_Gauche_Vertical = 50;
 206   2            break;
 207   2        }
 208   1        switch (droite)
 209   1        {
 210   2          case HAUT : Joystick_Droite_Vertical = 100; 
 211   2            break;
 212   2          case BAS : Joystick_Droite_Vertical = 0;
 213   2            break;
 214   2          case GAUCHE : Joystick_Droite_Horizontal = 0;
 215   2            break;
 216   2          case DROITE : Joystick_Droite_Horizontal = 100;
 217   2            break;
 218   2          case CALIBRATION : Joystick_Droite_Horizontal = 0; Joystick_Droite_Vertical = 0;
 219   2            break;
 220   2          case REPOS : Joystick_Droite_Horizontal = 50; Joystick_Droite_Vertical = 50;
 221   2            break;
 222   2        }
 223   1      }
 224          
 225          /*---------------------------------------------------------------------------*-
 226             FonctionDInterruptionDuTimer ()
 227            -----------------------------------------------------------------------------
 228             Descriptif: Fonction effectuée quand le timer 0 déclenche son interruption
 229             Entree    : --
 230             Sortie    : --
 231          -*---------------------------------------------------------------------------*/
 232          void FonctionDInterruptionDuTimer() interrupt INTERRUPT_TIMER0
 233          {
 234   1        flagTimer = 1;
 235   1      }
 236          
 237          /*---------------------------------------------------------------------------*-
 238             TimerInit ()
 239            -----------------------------------------------------------------------------
 240             Descriptif: Initialisation du timers 0 
C51 COMPILER V9.59.0.0   PILOTAGE_DRONE_AUTOMATIQUE                                        02/29/2020 19:22:33 PAGE 5   

 241                
 242             Entree    : --
 243             Sortie    : --
 244          -*---------------------------------------------------------------------------*/
 245          
 246          void TimerInit ()
 247          {
 248   1        TR0 = 0;       // stop le timer TR0 mettre avant la boucle while
 249   1        ET0 = 0;       // Inhibe l'interruption du timer 0  
 250   1       //---mode de ofnctionnement du timer----------------------------------------*/   
 251   1        TMOD &= 0xF0;
 252   1                    // ++++----- Timer1-->meme schema que pour timer 0   
 253   1                    // ||||+---- timer0 gate control 
 254   1                    // |||||     0: start soft
 255   1                    // |||||     1: start externe   
 256   1                    // |||||+--- Counter or timer select--> 1: counter | 0: timer
 257   1                    // ||||||++- timer0 mode select  
 258   1                    // ||||||||  00: mode0 13-bit Counter/timer
 259   1                    // ||||||||  01: mode1 16-bit Counter/timer
 260   1                    // ||||||||  10: mode2 8-bit Counter/timer with auto-reload
 261   1                    // ||||||||  11: mode3 deux 8-bit Counter/timer(pas utilise)
 262   1        TMOD  |=0x02;//00000010
 263   1        
 264   1        CKCON &= ~0x03;// masque les bit pas utilise
 265   1                    // ++++----- timer 2 et 3 clock select (pas utilise)   
 266   1                    // ||||+---- clock1 select-->  1: sysclock | 0: prescaled clock 
 267   1                    // |||||+--- clock0 select-->  1: sysclock | 0: prescaled clock   
 268   1                    // ||||||++- Predivision du clock   
 269   1                    // |||||||| 00: Sysclock / 12 | 01: Sysclock / 4 
 270   1                    // |||||||| 10: Sysclock / 48 | 11: Extclock / 8 
 271   1        CKCON |=0x01;//00000001
 272   1        
 273   1        TH0 = TL0 = LOADVALUE;
 274   1        
 275   1        TF0 = 0; //clear une interruption residuelle
 276   1        EA = 1; // autorisation générale des interruptions
 277   1        ET0 = 1; //autorise interuption du timer 0
 278   1      }
 279          
 280          /*---------------------------------------------------------------------------*-
 281             ClockInit ()
 282            -----------------------------------------------------------------------------
 283             Descriptif: Initialisation du mode de fonctionnement du clock systeme 
 284                   choix : SYSCLK : oscillateur HF interne a 48 MHz
 285          
 286             Entree    : --
 287             Sortie    : --
 288          -*---------------------------------------------------------------------------*/
 289          
 290          void ClockInit()
 291          {  
 292   1                           // +--------- clock interne LF
 293   1                           // | (1 : oscillateur LF : enable)
 294   1                           // | (0 : oscillateur LF: desable)
 295   1                           // |+-------- en lecture seule 1 : signal que oscillateur 
 296   1                           // ||         interne fonctionne a sa valeur de prog.
 297   1                           // ||++++---- reglage fin de la frequence de l'osc. LF
 298   1                           // ||||||++-- choix du diviseur :
 299   1                           // ||||||||       (00 : Osc LF /8 -> f = 10 KHz)
 300   1                           // ||||||||       (01 : Osc LF /4 -> f = 20 KHz)
 301   1                           // ||||||||       (10 : Osc LF /2 -> f = 40 KHz)
 302   1                           // ||||||||       (11 : Osc LF /1 -> f = 80 KHz)
C51 COMPILER V9.59.0.0   PILOTAGE_DRONE_AUTOMATIQUE                                        02/29/2020 19:22:33 PAGE 6   

 303   1         OSCLCN = 0x00;    // 00000000 
 304   1      
 305   1                           // +--------- non utilise
 306   1                           // |+++------ Selection du clock USB 
 307   1                           // ||||           (010 : Oscil ext. : limiter la conso.)
 308   1                           // ||||+----- clock out select
 309   1                           // |||||          (0 : sortie sysclk non synchronisee)
 310   1                           // |||||          (1 : sortie sysclk synchronisee)
 311   1                           // |||||+++-- choix du clock systeme
 312   1                           // ||||||||       (000 : Oscil interne 48/4  --> 1.5, 3, 6
 313   1                           // ||||||||              ou 12 MHz selon le choix du 
 314   1                           // ||||||||              diviseur dans OSCICN
 315   1                           // ||||||||       (001 : Oscil externe = x  MHz)
 316   1                           // ||||||||       (010 : Oscil interne HF 48/2 = 24 MHz)
 317   1                           // ||||||||       (011 : Oscil interne HF 48/1 = 48 MHz)    
 318   1                           // ||||||||       (100 : Oscil interne LF = 80 KHz max)   
 319   1                           // ||||||||       (101 a 111 : reserves)   
 320   1         CLKSEL = 0x23;    // 00100011  
 321   1      
 322   1                           // +--------- clock interne HF
 323   1                           // |              (1 : oscillateur HF : enable)
 324   1                           // |              (0 : oscillateur HF: desable)
 325   1                           // |+-------- en lecture seule 1 : signal que oscillateur 
 326   1                           // ||              interne fonctionne a sa valeur de prog.
 327   1                           // ||+------- 1 : suspend l'oscillateur interne
 328   1                           // |||+++---- non utilises
 329   1                           // ||||||++-- choix du diviseur :
 330   1                           // ||||||||       (00 : 12/8 -> f =  1.5 MHz)
 331   1                           // ||||||||       (01 : 12/4 -> f =  3   MHz)
 332   1                           // ||||||||       (10 : 12/2 -> f =  6   MHz)
 333   1                           // ||||||||       (11 : 12/1 -> f = 12   MHz)
 334   1         OSCICN = 0x83;    // 10000011 
 335   1      
 336   1         FLSCL = 0x90;     // A utiliser si le clock system est a 48 MHz
 337   1      
 338   1      } // ClockInit ----------------------------------------------------------------
 339          
 340          /*---------------------------------------------------------------------------*-
 341             PortInit ()
 342            -----------------------------------------------------------------------------
 343             Descriptif: Initialisation du mode de fonctionnement des ports 
 344             Entr�e    : --
 345             Sortie    : --
 346          -*---------------------------------------------------------------------------*/
 347          void PortInit () 
 348          {
 349   1         P0MDOUT = 0xFF;      // port P1 en sortie num�rique (push-pull)
 350   1         XBR1   |= 0x40;      // autorise le fonctionnement du crossbar
 351   1      
 352   1      }// PortInit ----------------------------------------------------------------


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    398    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
