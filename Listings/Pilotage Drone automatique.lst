C51 COMPILER V9.59.0.0   PILOTAGE_DRONE_AUTOMATIQUE                                        03/06/2020 20:38:58 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE PILOTAGE_DRONE_AUTOMATIQUE
OBJECT MODULE PLACED IN .\Objects\Pilotage Drone automatique.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Pilotage Drone automatique.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND
                    - PRINT(.\Listings\Pilotage Drone automatique.lst) TABS(2) OBJECT(.\Objects\Pilotage Drone automatique.obj)

line level    source

   1          /*===========================================================================*=
   2             CFPT - Projet : Pilotage manette
   3             Auteur        : Martin Manuel
   4             Date creation : 29.02.20
   5            =============================================================================
   6             Descriptif: Ce Logiciel vient remplacer deux joysticks d'une télécommande
   7            par 4 PWM (2 par joystick). dans un premier temps dans l'idée de piloter un
   8            drone en connectant les 4 signaux PWM à la place des joysticks sur la 
   9            télécommande.
  10            (Les PWM nécessitent un filtre RC afin de générer une tension analogique 
  11            continue proportionelle au PWM et pas un signal carré)
  12          =*===========================================================================*/
  13          #include <reg51f380.h>     // registres 51f38C
  14          #include "InterruptPriorities.h"
  15          
  16          // ==== Fonctions prototypes ==================================================
  17          void ClockInit ();      // init. clock systeme
  18          void PortInit ();       // init. config des ports
  19          void TimerInit ();      // init. timers
  20          
  21          // direction joysticks
  22          void Joystick (unsigned char gauche, unsigned char droite); 
  23          
  24          // ==== Fonctions prototypes ==================================================
  25          #define LOADVALUE 20
  26          
  27          // directions drone
  28          #define HAUT 0
  29          #define BAS 1
  30          #define GAUCHE 2
  31          #define DROITE 3
  32          #define CALIBRATION 4
  33          #define REPOS 5
  34          #define CLICKON 6
  35          #define CLICKOFF 7
  36          
  37          // ==== Variables Globales ====================================================
  38          bit flagTimer = 0;
  39          
  40          //--------- x% Joysticks Potentiometres --------------
  41          unsigned char Joystick_Gauche_Vertical = 50, Joystick_Gauche_Horizontal = 50,
  42            Joystick_Droite_Vertical = 50, Joystick_Droite_Horizontal = 10;
  43          
  44          //------------- Joysticks Buttons ------------------
  45          bit joystick_Gauche_Click = 0, joystick_Droite_Click = 0;
  46          
  47          /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  48          /*                                  MAIN                                       */
  49          /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  50          void main ()
  51          {
  52   1        //--- Variables locales ----------------------------------------------------
  53   1        unsigned char periodePWM = 0; //(va de 0 - 100)
  54   1        unsigned int compteurSeconde = 0; 
C51 COMPILER V9.59.0.0   PILOTAGE_DRONE_AUTOMATIQUE                                        03/06/2020 20:38:58 PAGE 2   

  55   1        unsigned char compteurMiliSeconde = 0, compteurAction;
  56   1        bit run = 1, flagSeconde;
  57   1        
  58   1      
  59   1        
  60   1        //--------- PWM Joysticks ----------------------------
  61   1                               //      +---- PWM Joystick Gauche Vertical
  62   1                               //      |+--- PWM Joystick Gauche Horizontal
  63   1                               //      ||+-- PWM Joystick Droite Vertical
  64   1                               //      |||+- PWM Joystick Droite Horizontal
  65   1                               //      ||||
  66   1        unsigned char pwm = 0; // xxxx xxxx 4 PWM
  67   1      
  68   1      
  69   1        
  70   1        //--- Initialisation uC-----------------------------------------------------
  71   1        PCA0MD &= ~0x40;     // WDTE = 0 (disable watchdog timer)
  72   1        ClockInit ();        // init. clock systeme
  73   1        PortInit ();         // init. config des ports 
  74   1        TimerInit ();        // init. timers
  75   1        TR0 = 1;             // lance le timer 0
  76   1        
  77   1        //----Boucle infinie--------------------------------------------------------  
  78   1        while (run)
  79   1        {
  80   2          if(flagSeconde)
  81   2          {
  82   3            flagSeconde = 0;
  83   3            switch (compteurAction)
  84   3            {
  85   4              // test
  86   4              case 0 : Joystick (HAUT,HAUT);
  87   4                break;
  88   4              case 1 : Joystick (BAS,BAS);
  89   4                break;
  90   4              case 2 : Joystick (GAUCHE,GAUCHE);
  91   4                break;
  92   4              case 3 : Joystick (DROITE,DROITE);
  93   4                break;
  94   4              case 4 : Joystick (REPOS,REPOS);
  95   4                break;
  96   4              case 5 : Joystick (CALIBRATION,CALIBRATION);
  97   4                break;
  98   4              case 6 : Joystick (CLICKON,CLICKON);
  99   4                break;
 100   4              case 7 : Joystick (CLICKOFF,CLICKOFF);
 101   4                break;
 102   4              case 8 : compteurAction = 0;
 103   4                break;
 104   4              
 105   4              /* // Demarrage drone
 106   4              case 0 : Joystick (HAUT,REPOS);
 107   4                break;
 108   4              case 1 : Joystick (BAS,REPOS);
 109   4                break;
 110   4              case 2 : Joystick (CALIBRATION,CALIBRATION);
 111   4                break;
 112   4              case 3 : Joystick (CLICKON,REPOS); // décollage drone
 113   4                break;
 114   4              case 4 : Joystick (CLICKOFF,REPOS); 
 115   4                break;
 116   4              case 5 : run = 0; // met fin au programme après toutes les actions
C51 COMPILER V9.59.0.0   PILOTAGE_DRONE_AUTOMATIQUE                                        03/06/2020 20:38:58 PAGE 3   

 117   4                break;*/
 118   4            }
 119   3            compteurAction ++;
 120   3            
 121   3          }
 122   2          //chaque 10us
 123   2          if(flagTimer)
 124   2          {
 125   3            //----- compteur base de temps ----
 126   3            
 127   3            if(compteurMiliSeconde <= 100)
 128   3            {
 129   4              compteurMiliSeconde++;
 130   4            }
 131   3            else
 132   3            {
 133   4              compteurMiliSeconde = 0;
 134   4              compteurSeconde ++;
 135   4            }
 136   3            
 137   3            if(compteurSeconde > 1000)
 138   3            {
 139   4              compteurSeconde = 0;
 140   4              flagSeconde = 1;
 141   4            }
 142   3      
 143   3            
 144   3            // --- mise a jour periode PWM ----
 145   3            periodePWM ++;
 146   3            if(periodePWM>100)
 147   3            {
 148   4              periodePWM = 0;
 149   4            }
 150   3            
 151   3            // --- mise a jour valeurs PWM ----
 152   3            if(Joystick_Gauche_Vertical >= periodePWM)
 153   3            {
 154   4              pwm |= 0x08; //PWM Joystick Gauche Vertical force a 1
 155   4            }
 156   3            else
 157   3            {
 158   4              pwm &= 0xF7; //PWM Joystick Gauche Vertical force a 0
 159   4            }
 160   3            
 161   3            if(Joystick_Gauche_Horizontal >= periodePWM)
 162   3            {
 163   4              pwm |= 0x04; //PWM Joystick Gauche Vertical force a 1
 164   4            }
 165   3            else
 166   3            {
 167   4              pwm &= 0xFB; //PWM Joystick Gauche Vertical force a 0
 168   4            }
 169   3            
 170   3            if(Joystick_Droite_Vertical >= periodePWM)
 171   3            {
 172   4              pwm |= 0x02; //PWM Joystick Gauche Vertical force a 1
 173   4            }
 174   3            else
 175   3            {
 176   4              pwm &= 0xFD; //PWM Joystick Gauche Vertical force a 0
 177   4            }
 178   3            
C51 COMPILER V9.59.0.0   PILOTAGE_DRONE_AUTOMATIQUE                                        03/06/2020 20:38:58 PAGE 4   

 179   3            if(Joystick_Droite_Horizontal >= periodePWM)
 180   3            {
 181   4              pwm |= 0x01; //PWM Joystick Gauche Vertical force a 1
 182   4            }
 183   3            else
 184   3            {
 185   4              pwm &= 0xFE; //PWM Joystick Gauche Vertical force a 0
 186   4            }
 187   3            
 188   3            
 189   3            // on met à jour la valeur des boutons des joysticks et du pwm
 190   3            if(joystick_Gauche_Click)
 191   3            {
 192   4              P0 = (pwm |= 0x10);
 193   4            }
 194   3            else
 195   3            {
 196   4              P0 = (pwm &= 0xEF);
 197   4            }
 198   3            if(joystick_Droite_Click)
 199   3            {
 200   4              P0 = (pwm |= 0x20);
 201   4            }
 202   3            else
 203   3            {
 204   4              P0 = (pwm &= 0xDF);
 205   4            }
 206   3            
 207   3          }
 208   2          
 209   2        }// End while (1)
 210   1      }   /*%%%%%%%%%%%%%%%%%%%%%%%%%%%% END MAIN %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
 211          //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Routine d'initialisation uC%%%%%%%%%%%%%%%%%%%%%%%%%%%
 212          
 213          
 214          /*---------------------------------------------------------------------------*-
 215             Joystick ()
 216            -----------------------------------------------------------------------------
 217             Descriptif: fonction simulant le fonctionnement de deux joysticks
 218             Entree    : gauche (HAUT,BAS,GAUCHE,DROITE,CALIBRATIONDRONE,CLICKON,CLICKOFF)
 219                         droite (HAUT,BAS,GAUCHE,DROITE,CALIBRATIONDRONE,CLICKON,CLICKOFF)
 220             Sortie    : --
 221          -*---------------------------------------------------------------------------*/
 222          void Joystick (unsigned char gauche, unsigned char droite)
 223          {
 224   1        switch (gauche)
 225   1        {
 226   2          case HAUT : Joystick_Gauche_Vertical = 100; 
 227   2            break;
 228   2          case BAS : Joystick_Gauche_Vertical = 0;
 229   2            break;
 230   2          case GAUCHE : Joystick_Gauche_Horizontal = 0;
 231   2            break;
 232   2          case DROITE : Joystick_Gauche_Horizontal = 100;
 233   2            break;
 234   2          case CALIBRATION : Joystick_Gauche_Horizontal = 100; Joystick_Gauche_Vertical = 0;
 235   2            break;
 236   2          case REPOS : Joystick_Gauche_Horizontal = 50; Joystick_Gauche_Vertical = 50;
 237   2            break;
 238   2          case CLICKON : joystick_Gauche_Click = 1;
 239   2            break;
 240   2          case CLICKOFF : joystick_Gauche_Click = 0;
C51 COMPILER V9.59.0.0   PILOTAGE_DRONE_AUTOMATIQUE                                        03/06/2020 20:38:58 PAGE 5   

 241   2            break;
 242   2        }
 243   1        switch (droite)
 244   1        {
 245   2          case HAUT : Joystick_Droite_Vertical = 100; 
 246   2            break;
 247   2          case BAS : Joystick_Droite_Vertical = 0;
 248   2            break;
 249   2          case GAUCHE : Joystick_Droite_Horizontal = 0;
 250   2            break;
 251   2          case DROITE : Joystick_Droite_Horizontal = 100;
 252   2            break;
 253   2          case CALIBRATION : Joystick_Droite_Horizontal = 0; Joystick_Droite_Vertical = 0;
 254   2            break;
 255   2          case REPOS : Joystick_Droite_Horizontal = 50; Joystick_Droite_Vertical = 50;
 256   2            break;
 257   2          case CLICKON : joystick_Droite_Click = 1;
 258   2            break;
 259   2          case CLICKOFF : joystick_Droite_Click = 0;
 260   2            break;
 261   2        }
 262   1      }
 263          
 264          /*---------------------------------------------------------------------------*-
 265             FonctionDInterruptionDuTimer ()
 266            -----------------------------------------------------------------------------
 267             Descriptif: Fonction effectuée quand le timer 0 déclenche son interruption
 268             Entree    : --
 269             Sortie    : --
 270          -*---------------------------------------------------------------------------*/
 271          void FonctionDInterruptionDuTimer() interrupt INTERRUPT_TIMER0
 272          {
 273   1        flagTimer = 1;
 274   1      }
 275          
 276          /*---------------------------------------------------------------------------*-
 277             TimerInit ()
 278            -----------------------------------------------------------------------------
 279             Descriptif: Initialisation du timers 0 
 280                
 281             Entree    : --
 282             Sortie    : --
 283          -*---------------------------------------------------------------------------*/
 284          
 285          void TimerInit ()
 286          {
 287   1        TR0 = 0;       // stop le timer TR0 mettre avant la boucle while
 288   1        ET0 = 0;       // Inhibe l'interruption du timer 0  
 289   1       //---mode de ofnctionnement du timer----------------------------------------*/   
 290   1        TMOD &= 0xF0;
 291   1                    // ++++----- Timer1-->meme schema que pour timer 0   
 292   1                    // ||||+---- timer0 gate control 
 293   1                    // |||||     0: start soft
 294   1                    // |||||     1: start externe   
 295   1                    // |||||+--- Counter or timer select--> 1: counter | 0: timer
 296   1                    // ||||||++- timer0 mode select  
 297   1                    // ||||||||  00: mode0 13-bit Counter/timer
 298   1                    // ||||||||  01: mode1 16-bit Counter/timer
 299   1                    // ||||||||  10: mode2 8-bit Counter/timer with auto-reload
 300   1                    // ||||||||  11: mode3 deux 8-bit Counter/timer(pas utilise)
 301   1        TMOD  |=0x02;//00000010
 302   1        
C51 COMPILER V9.59.0.0   PILOTAGE_DRONE_AUTOMATIQUE                                        03/06/2020 20:38:58 PAGE 6   

 303   1        CKCON &= ~0x03;// masque les bit pas utilise
 304   1                    // ++++----- timer 2 et 3 clock select (pas utilise)   
 305   1                    // ||||+---- clock1 select-->  1: sysclock | 0: prescaled clock 
 306   1                    // |||||+--- clock0 select-->  1: sysclock | 0: prescaled clock   
 307   1                    // ||||||++- Predivision du clock   
 308   1                    // |||||||| 00: Sysclock / 12 | 01: Sysclock / 4 
 309   1                    // |||||||| 10: Sysclock / 48 | 11: Extclock / 8 
 310   1        CKCON |=0x01;//00000001
 311   1        
 312   1        TH0 = TL0 = LOADVALUE;
 313   1        
 314   1        TF0 = 0; //clear une interruption residuelle
 315   1        EA = 1; // autorisation générale des interruptions
 316   1        ET0 = 1; //autorise interuption du timer 0
 317   1      }
 318          
 319          /*---------------------------------------------------------------------------*-
 320             ClockInit ()
 321            -----------------------------------------------------------------------------
 322             Descriptif: Initialisation du mode de fonctionnement du clock systeme 
 323                   choix : SYSCLK : oscillateur HF interne a 48 MHz
 324          
 325             Entree    : --
 326             Sortie    : --
 327          -*---------------------------------------------------------------------------*/
 328          
 329          void ClockInit()
 330          {  
 331   1                           // +--------- clock interne LF
 332   1                           // | (1 : oscillateur LF : enable)
 333   1                           // | (0 : oscillateur LF: desable)
 334   1                           // |+-------- en lecture seule 1 : signal que oscillateur 
 335   1                           // ||         interne fonctionne a sa valeur de prog.
 336   1                           // ||++++---- reglage fin de la frequence de l'osc. LF
 337   1                           // ||||||++-- choix du diviseur :
 338   1                           // ||||||||       (00 : Osc LF /8 -> f = 10 KHz)
 339   1                           // ||||||||       (01 : Osc LF /4 -> f = 20 KHz)
 340   1                           // ||||||||       (10 : Osc LF /2 -> f = 40 KHz)
 341   1                           // ||||||||       (11 : Osc LF /1 -> f = 80 KHz)
 342   1         OSCLCN = 0x00;    // 00000000 
 343   1      
 344   1                           // +--------- non utilise
 345   1                           // |+++------ Selection du clock USB 
 346   1                           // ||||           (010 : Oscil ext. : limiter la conso.)
 347   1                           // ||||+----- clock out select
 348   1                           // |||||          (0 : sortie sysclk non synchronisee)
 349   1                           // |||||          (1 : sortie sysclk synchronisee)
 350   1                           // |||||+++-- choix du clock systeme
 351   1                           // ||||||||       (000 : Oscil interne 48/4  --> 1.5, 3, 6
 352   1                           // ||||||||              ou 12 MHz selon le choix du 
 353   1                           // ||||||||              diviseur dans OSCICN
 354   1                           // ||||||||       (001 : Oscil externe = x  MHz)
 355   1                           // ||||||||       (010 : Oscil interne HF 48/2 = 24 MHz)
 356   1                           // ||||||||       (011 : Oscil interne HF 48/1 = 48 MHz)    
 357   1                           // ||||||||       (100 : Oscil interne LF = 80 KHz max)   
 358   1                           // ||||||||       (101 a 111 : reserves)   
 359   1         CLKSEL = 0x23;    // 00100011  
 360   1      
 361   1                           // +--------- clock interne HF
 362   1                           // |              (1 : oscillateur HF : enable)
 363   1                           // |              (0 : oscillateur HF: desable)
 364   1                           // |+-------- en lecture seule 1 : signal que oscillateur 
C51 COMPILER V9.59.0.0   PILOTAGE_DRONE_AUTOMATIQUE                                        03/06/2020 20:38:58 PAGE 7   

 365   1                           // ||              interne fonctionne a sa valeur de prog.
 366   1                           // ||+------- 1 : suspend l'oscillateur interne
 367   1                           // |||+++---- non utilises
 368   1                           // ||||||++-- choix du diviseur :
 369   1                           // ||||||||       (00 : 12/8 -> f =  1.5 MHz)
 370   1                           // ||||||||       (01 : 12/4 -> f =  3   MHz)
 371   1                           // ||||||||       (10 : 12/2 -> f =  6   MHz)
 372   1                           // ||||||||       (11 : 12/1 -> f = 12   MHz)
 373   1         OSCICN = 0x83;    // 10000011 
 374   1      
 375   1         FLSCL = 0x90;     // A utiliser si le clock system est a 48 MHz
 376   1      
 377   1      } // ClockInit ----------------------------------------------------------------
 378          
 379          /*---------------------------------------------------------------------------*-
 380             PortInit ()
 381            -----------------------------------------------------------------------------
 382             Descriptif: Initialisation du mode de fonctionnement des ports 
 383             Entr�e    : --
 384             Sortie    : --
 385          -*---------------------------------------------------------------------------*/
 386          void PortInit () 
 387          {
 388   1         P0MDOUT = 0xFF;      // port P0 en sortie numerique (push-pull)
 389   1         XBR1   |= 0x40;      // autorise le fonctionnement du crossbar
 390   1      
 391   1      }// PortInit ----------------------------------------------------------------


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    491    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
